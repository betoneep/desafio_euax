{"remainingRequest":"X:\\Projetos Git\\Desafio EUAX\\web\\web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!X:\\Projetos Git\\Desafio EUAX\\web\\web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!X:\\Projetos Git\\Desafio EUAX\\web\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!X:\\Projetos Git\\Desafio EUAX\\web\\web\\src\\views\\Projeto\\NovoProjeto.vue?vue&type=template&id=0e6ca7b3&","dependencies":[{"path":"X:\\Projetos Git\\Desafio EUAX\\web\\web\\src\\views\\Projeto\\NovoProjeto.vue","mtime":1629344287045},{"path":"X:\\Projetos Git\\Desafio EUAX\\web\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"X:\\Projetos Git\\Desafio EUAX\\web\\web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"X:\\Projetos Git\\Desafio EUAX\\web\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"X:\\Projetos Git\\Desafio EUAX\\web\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}