// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistencia;

namespace Persistencia.Migrations
{
    [DbContext(typeof(Contexto))]
    partial class ContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Dominio.Entidade.Arquivo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Binario")
                        .HasColumnName("binario")
                        .HasColumnType("bytea");

                    b.Property<string>("Caminho")
                        .HasColumnName("caminho")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnName("data_alteracao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnName("data_cadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Excluido")
                        .HasColumnName("excluido")
                        .HasColumnType("boolean");

                    b.Property<string>("Hash")
                        .HasColumnName("hash")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MimeType")
                        .HasColumnName("mime_type")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UsuarioAlteracao")
                        .HasColumnName("usuario_alteracao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioCadastro")
                        .HasColumnName("usuario_cadastro")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioExclusao")
                        .HasColumnName("usuario_exclusao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id")
                        .HasName("pk_arquivo");

                    b.ToTable("arquivo");
                });

            modelBuilder.Entity("Dominio.Entidade.Atividade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnName("data_alteracao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnName("data_cadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnName("data_fim")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnName("data_inicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Excluido")
                        .HasColumnName("excluido")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Finalizada")
                        .HasColumnName("finalizada")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjetoId")
                        .HasColumnName("projeto_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UsuarioAlteracao")
                        .HasColumnName("usuario_alteracao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioCadastro")
                        .HasColumnName("usuario_cadastro")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioExclusao")
                        .HasColumnName("usuario_exclusao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id")
                        .HasName("pk_atividade");

                    b.HasIndex("ProjetoId")
                        .HasName("ix_atividade_projeto_id");

                    b.ToTable("atividade");
                });

            modelBuilder.Entity("Dominio.Entidade.Contato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnName("data_alteracao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnName("data_cadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("Excluido")
                        .HasColumnName("excluido")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Observacao")
                        .HasColumnName("observacao")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<Guid>("ReferenciaId")
                        .HasColumnName("referencia_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Telefone")
                        .HasColumnName("telefone")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UsuarioAlteracao")
                        .HasColumnName("usuario_alteracao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioCadastro")
                        .HasColumnName("usuario_cadastro")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioExclusao")
                        .HasColumnName("usuario_exclusao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id")
                        .HasName("pk_contato");

                    b.HasIndex("ReferenciaId")
                        .HasName("ix_contato_referencia_id");

                    b.ToTable("contato");
                });

            modelBuilder.Entity("Dominio.Entidade.Documento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnName("data_alteracao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnName("data_cadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Excluido")
                        .HasColumnName("excluido")
                        .HasColumnType("boolean");

                    b.Property<string>("Numero")
                        .HasColumnName("numero")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Observacao")
                        .HasColumnName("observacao")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("ReferenciaId")
                        .HasColumnName("referencia_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TipoDocumentoId")
                        .HasColumnName("tipo_documento_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UsuarioAlteracao")
                        .HasColumnName("usuario_alteracao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioCadastro")
                        .HasColumnName("usuario_cadastro")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioExclusao")
                        .HasColumnName("usuario_exclusao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<DateTime?>("Validade")
                        .HasColumnName("validade")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_documento");

                    b.ToTable("documento");
                });

            modelBuilder.Entity("Dominio.Entidade.DocumentoAnexo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArquivoId")
                        .HasColumnName("arquivo_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnName("data_alteracao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnName("data_cadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DocumentoId")
                        .HasColumnName("documento_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Excluido")
                        .HasColumnName("excluido")
                        .HasColumnType("boolean");

                    b.Property<string>("UsuarioAlteracao")
                        .HasColumnName("usuario_alteracao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioCadastro")
                        .HasColumnName("usuario_cadastro")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioExclusao")
                        .HasColumnName("usuario_exclusao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id")
                        .HasName("pk_documento_anexo");

                    b.HasIndex("DocumentoId")
                        .HasName("ix_documento_anexo_documento_id");

                    b.ToTable("documento_anexo");
                });

            modelBuilder.Entity("Dominio.Entidade.Projeto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnName("data_alteracao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnName("data_cadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnName("data_fim")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnName("data_inicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Excluido")
                        .HasColumnName("excluido")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioAlteracao")
                        .HasColumnName("usuario_alteracao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioCadastro")
                        .HasColumnName("usuario_cadastro")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioExclusao")
                        .HasColumnName("usuario_exclusao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id")
                        .HasName("pk_projeto");

                    b.ToTable("projeto");
                });

            modelBuilder.Entity("Dominio.Entidade.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnName("data_alteracao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnName("data_cadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnName("data_expiracao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Excluido")
                        .HasColumnName("excluido")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SessaoId")
                        .HasColumnName("sessao_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UsuarioAlteracao")
                        .HasColumnName("usuario_alteracao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioCadastro")
                        .HasColumnName("usuario_cadastro")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioExclusao")
                        .HasColumnName("usuario_exclusao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("usuario_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_token");

                    b.HasIndex("UsuarioId")
                        .HasName("ix_token_usuario_id");

                    b.ToTable("token");
                });

            modelBuilder.Entity("Dominio.Entidade.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnName("ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnName("data_alteracao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnName("data_cadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<bool>("Excluido")
                        .HasColumnName("excluido")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Senha")
                        .HasColumnName("senha")
                        .HasColumnType("character varying(35)")
                        .HasMaxLength(35);

                    b.Property<string>("UsuarioAlteracao")
                        .HasColumnName("usuario_alteracao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioCadastro")
                        .HasColumnName("usuario_cadastro")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UsuarioExclusao")
                        .HasColumnName("usuario_exclusao")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id")
                        .HasName("pk_usuario");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("ix_usuario_email");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("Dominio.Entidade.Atividade", b =>
                {
                    b.HasOne("Dominio.Entidade.Projeto", "Projeto")
                        .WithMany()
                        .HasForeignKey("ProjetoId")
                        .HasConstraintName("fk_atividade_projeto_projeto_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.Entidade.DocumentoAnexo", b =>
                {
                    b.HasOne("Dominio.Entidade.Documento", "Documento")
                        .WithMany("Arquivos")
                        .HasForeignKey("DocumentoId")
                        .HasConstraintName("fk_documento_anexo_documento_documento_id");
                });

            modelBuilder.Entity("Dominio.Entidade.Token", b =>
                {
                    b.HasOne("Dominio.Entidade.Usuario", "Usuario")
                        .WithMany("Tokens")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("fk_token_usuario_usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
